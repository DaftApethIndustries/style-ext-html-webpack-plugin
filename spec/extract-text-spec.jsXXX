/* eslint-env jasmine */
'use strict';

const path = require('path');
const setModuleVersion = require('dynavers')('dynavers.json');
const rimraf = require('rimraf');
const StyleExtHtmlWebpackPlugin = require('../index.js');
const testPlugin = require('./helpers/testPlugin.js');

const VERSIONS = require('./helpers/versions');
const RUNTIME_COMMENT = require('../lib/constants.js').REGEXPS.RUNTIME_COMMENT;
const OUTPUT_DIR = path.join(__dirname, '../dist');

const baseConfig = (extractTextLoader) => {
  return {
    entry: path.join(__dirname, 'fixtures/two_stylesheets.js'),
    output: {
      path: path.join(__dirname, '../dist'),
      filename: 'index_bundle.js'
    },
    module: {
      loaders: [
        { test: /stylesheet1.css/, loader: StyleExtHtmlWebpackPlugin.inline() },
        extractTextLoader
      ]
    }
  };
};

const buildConfig = (...configs) => {
  return Object.assign({}, ...configs);
};

describe('Functionality alongside ExtractTextPlugin: ', () => {
  beforeEach((done) => {
    rimraf(OUTPUT_DIR, done);
  });

  VERSIONS.forEach(version => {
    setModuleVersion('webpack', version.webpack, false);
    setModuleVersion('extract-text-webpack-plugin', version.extractText, true);
    const webpack = require('webpack');
    const ExtractTextPlugin = require('extract-text-webpack-plugin');
    const HtmlWebpackPlugin = require('html-webpack-plugin');
    const basePlugins = () => ({
      plugins: [
        new HtmlWebpackPlugin(),
        new StyleExtHtmlWebpackPlugin(),
        new ExtractTextPlugin('styles.css')
      ]
    });

    describe('Webpack v' + version.webpack + ':', () => {
      it('inlining works alongside linked stylesheets', (done) => {
        const extractTextLoader = {
          test: /stylesheet2.css/,
          loader: version.extractTextLoader(ExtractTextPlugin)
        };
        testPlugin(
          webpack,
          buildConfig(
            baseConfig(extractTextLoader),
            basePlugins()
          ),
          [/<link href="styles.css" rel="stylesheet">[\s\S]*<style>[\s\S]*background: snow;[\s\S]*<\/style>/],
          [
            RUNTIME_COMMENT,
            /(removed by extract-text-webpack-plugin){1}/
          ],
          done);
      });

      it('inlining works alongside linked stylesheets - more general RegEx', (done) => {
        const extractTextLoader = {
          test: /stylesheet[2-9]\.css/,
          loader: version.extractTextLoader(ExtractTextPlugin)
        };
        testPlugin(
          webpack,
          buildConfig(
            baseConfig(extractTextLoader),
            basePlugins()
          ),
          [
            /<link href="styles.css" rel="stylesheet">[\s\S]*<style>[\s\S]*background: snow;[\s\S]*<\/style>/,
            /^(?!colour: grey)/
          ],
          [
            RUNTIME_COMMENT,
            /(removed by extract-text-webpack-plugin){1}/
          ],
          done);
      });
    });
  });
});
