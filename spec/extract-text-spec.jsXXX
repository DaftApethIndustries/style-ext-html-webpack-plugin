/* eslint-env jasmine */
'use strict';

const path = require('path');
const setModuleVersion = require('dynavers')('dynavers.json');
const rimraf = require('rimraf');
const StyleExtHtmlWebpackPlugin = require('../index.js');
const testPlugin = require('./helpers/testPlugin.js');

/*
const VERSION_CONTEXTS = [
  new VersionContext('1.13.2', '1.0.1', ['style-loader', 'css-loader']),
  new VersionContext('2.1.0-beta.20', '2.0.0-beta.4', [{fallbackLoader: 'style-loader', loader: 'css-loader'}])
];
*/

const WEBPACK_VERSIONS = require('./helpers/webpackVersions');
const RUNTIME_COMMENT = require('../constants.js').REGEXPS.RUNTIME_COMMENT;
const OUTPUT_DIR = path.join(__dirname, '../dist');

describe('Functionality alongside ExtractTextPlugin: ', () => {
  beforeEach((done) => {
    rimraf(OUTPUT_DIR, done);
  });

  WEBPACK_VERSIONS.forEach(webpackVersion => {
    setModuleVersion('webpack', webpackVersion, true);
    var webpack = require('webpack');
    var ExtractTextPlugin = require('extract-text-webpack-plugin');
    var HtmlWebpackPlugin = require('html-webpack-plugin');

    describe('Webpack v' + webpackVersion + ':', () => {
      it('inlining works alongside linked stylesheets', (done) => {
        testPlugin(
          webpack,
          { entry: path.join(__dirname, 'fixtures/two_stylesheets.js'),
            output: {
              path: OUTPUT_DIR,
              filename: 'index_bundle.js'
            },
            module: {
              loaders: [
                { test: /stylesheet1.css/, loader: StyleExtHtmlWebpackPlugin.inline() },
                { test: /stylesheet2.css/, loader: versionContext.extractTextLoader(ExtractTextPlugin) }
              ]
            },
            plugins: [
              new HtmlWebpackPlugin(),
              new StyleExtHtmlWebpackPlugin(),
              new ExtractTextPlugin('styles.css')
            ]
          },
          [/<link href="styles.css" rel="stylesheet">[\s\S]*<style>[\s\S]*background: snow;[\s\S]*<\/style>/],
          [
            RUNTIME_COMMENT,
            /(removed by extract-text-webpack-plugin){1}/
          ],
          done);
      });

      it('inlining works alongside linked stylesheets - more general RegEx', (done) => {
        testPlugin(
          webpack,
          { entry: path.join(__dirname, 'fixtures/two_stylesheets.js'),
            output: {
              path: OUTPUT_DIR,
              filename: 'index_bundle.js'
            },
            module: {
              loaders: [
                { test: /stylesheet1\.css$/, loader: StyleExtHtmlWebpackPlugin.inline() },
                { test: /stylesheet[2-9]\.css$/, loader: versionContext.extractTextLoader(ExtractTextPlugin) }
              ]
            },
            plugins: [
              new HtmlWebpackPlugin(),
              new StyleExtHtmlWebpackPlugin(),
              new ExtractTextPlugin('styles.css')
            ]
          },
          [
            /<link href="styles.css" rel="stylesheet">[\s\S]*<style>[\s\S]*background: snow;[\s\S]*<\/style>/,
            /^(?!colour: grey)/
          ],
          [
            RUNTIME_COMMENT,
            /(removed by extract-text-webpack-plugin){1}/
          ],
          done);
      });
    });
  });
});
